#!/usr/bin/env python3
# Copyright 2015-2022 The Wazo Authors  (see the AUTHORS file)
# SPDX-License-Identifier: GPL-3.0+

import re
import argparse
import glob
import json
import logging
import os.path
import subprocess
import sys
from xivo.xivo_logging import setup_logging

LOG_FORMAT = '%(asctime)s [%(process)d] (%(levelname)s): %(message)s'
REMOTE_USER = 'root'
SSH_KEY = '/root/.ssh/xivo_id_rsa'
SYNC_DIRECTORIES = [
    '/etc/asterisk/extensions_extra.d',
    '/etc/xivo/asterisk',
    '/root/.config/wazo-auth-cli',
    '/var/lib/asterisk/agi-bin',
    '/var/lib/asterisk/moh',
    '/var/lib/wazo-auth-keys',
]
SOUND_DIR_RE = re.compile(
    r'^/var/lib/wazo/sounds/tenants/[a-z0-9-]+/(?!monitor|recording).*$'
)


SYNC_DIRECTORIES += [
    d for d in glob.glob('/var/lib/wazo/sounds/tenants/*/*') if SOUND_DIR_RE.match(d)
]

logger = logging.getLogger()


def main():
    args = parse_args()

    setup_logging('/var/log/xivo-sync.log', log_format=LOG_FORMAT)
    try:
        ha_conf = read_ha_conf()
        if args.init:
            init(ha_conf)
        else:
            sync(ha_conf)
    except Exception:
        logger.exception('Unexpected error:')
        sys.exit(1)


def init(ha_conf):
    if not ha_conf.is_master():
        print('HA not configured or not a master node', file=sys.stderr)
        sys.exit(1)
    if ssh_key_exists():
        print(f'SSH key {SSH_KEY} already exist', file=sys.stderr)
        sys.exit(1)

    print(f'Generating SSH key {SSH_KEY}...')
    subprocess.call(
        ['ssh-keygen', '-q', '-t', 'rsa', '-N', '', '-C', 'XiVO HA', '-f', SSH_KEY]
    )
    print(f'Copying SSH key to {ha_conf.remote_address()} (using ssh-copy-id)...')
    subprocess.call(
        ['ssh-copy-id', '-i', SSH_KEY, f'{REMOTE_USER}@{ha_conf.remote_address()}']
    )


def sync(ha_conf):
    if not ha_conf.is_master():
        logger.error('HA not configured or not a master node')
        sys.exit(1)
    if not ssh_key_exists():
        logger.info('SSH key %s not found: not synchronizing', SSH_KEY)
        sys.exit(0)

    logger.info('Synchronizing to %s...', ha_conf.remote_address())
    command = [
        'rsync',
        '-q',
        '-aR',
        '--delete-after',
        '-e',
        f'ssh -i {SSH_KEY} -o PreferredAuthentications=publickey',
    ]
    command.extend(SYNC_DIRECTORIES)
    command.append(f'{REMOTE_USER}@{ha_conf.remote_address()}:/')
    p = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    output = p.communicate()[0]
    if p.returncode:
        logger.error(
            'Synchronization failure: rsync exit status %s with output:\n%s',
            p.returncode,
            output,
        )
        sys.exit(1)
    else:
        logger.info('Synchronization successful')


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('-i', '--init', action='store_true')
    return parser.parse_args()


def read_ha_conf():
    try:
        with open('/etc/xivo/ha.conf') as fobj:
            return HAConfig(json.load(fobj))
    except OSError:
        return HAConfig(None)


class HAConfig:
    def __init__(self, obj):
        self._obj = obj

    def is_master(self):
        return self._obj and self._obj['node_type'] == 'master'

    def remote_address(self):
        return self._obj['remote_address']


def ssh_key_exists():
    return os.path.isfile(SSH_KEY)


main()
